{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"../lib/collections","imported":["Chats","Messages"],"specifiers":[{"kind":"named","imported":"Chats","local":"Chats"},{"kind":"named","imported":"Messages","local":"Messages"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/lib/methods.js","filenameRelative":"/lib/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/methods.js.map","sourceFileName":"/lib/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});var Chats,Messages;module.import('../lib/collections',{\"Chats\":function(v){Chats=v},\"Messages\":function(v){Messages=v}});\n\n\n\nMeteor.methods({\n  newMessage: function () {\n    function newMessage(message) {\n      if (!this.userId) {\n        throw new Meteor.Error('not-logged-in', 'Must be logged in to send message.');\n      }\n\n      check(message, Match.OneOf({\n        text: String,\n        type: String,\n        chatId: String\n      }, {\n        picture: String,\n        type: String,\n        chatId: String\n      }));\n\n      message.timestamp = new Date();\n      message.userId = this.userId;\n\n      var messageId = Messages.insert(message);\n      Chats.update(message.chatId, { $set: { lastMessage: message } });\n\n      return messageId;\n    }\n\n    return newMessage;\n  }(),\n  updateName: function () {\n    function updateName(name) {\n      if (!this.userId) {\n        throw new Meteor.Error('not-logged-in', 'Must be logged in to update his name.');\n      }\n\n      check(name, String);\n\n      if (name.length === 0) {\n        throw Meteor.Error('name-required', 'Must provide a user name');\n      }\n\n      return Meteor.users.update(this.userId, { $set: { 'profile.name': name } });\n    }\n\n    return updateName;\n  }(),\n  newChat: function () {\n    function newChat(otherId) {\n      if (!this.userId) {\n        throw new Meteor.Error('not-logged-in', 'Must be logged to create a chat.');\n      }\n\n      check(otherId, String);\n      var otherUser = Meteor.users.findOne(otherId);\n\n      if (!otherUser) {\n        throw new Meteor.Error('user-not-exists', 'Chat\\'s user not exists');\n      }\n\n      var chat = {\n        userIds: [this.userId, otherId],\n        createdAt: new Date()\n      };\n\n      var chatId = Chats.insert(chat);\n\n      return chatId;\n    }\n\n    return newChat;\n  }(),\n  removeChat: function () {\n    function removeChat(chatId) {\n      if (!this.userId) {\n        throw new Meteor.Error('not-logged-in', 'Must be logged to create a chat.');\n      }\n\n      check(chatId, String);\n\n      var chat = Chats.findOne(chatId);\n\n      if (!chat || !_.include(chat.userIds, this.userId)) {\n        throw new Meteor.Error('chat-not-exists', 'Chat not exists');\n      }\n\n      Messages.remove({ chatId: chatId });\n\n      return Chats.remove({ _id: chatId });\n    }\n\n    return removeChat;\n  }(),\n  updatePicture: function () {\n    function updatePicture(data) {\n      if (!this.userId) {\n        throw new Meteor.Error('not-logged-in', 'Must be logged in to update his picture.');\n      }\n\n      check(data, String);\n\n      return Meteor.users.update(this.userId, { $set: { 'profile.picture': data } });\n    }\n\n    return updatePicture;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/lib/methods.js"],"names":["Meteor","check","Chats","Messages","methods","newMessage","message","userId","Error","Match","OneOf","text","String","type","chatId","picture","timestamp","Date","messageId","insert","update","$set","lastMessage","updateName","name","length","users","newChat","otherId","otherUser","findOne","chat","userIds","createdAt","removeChat","_","include","remove","_id","updatePicture","data"],"mappings":"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","file":"/lib/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { Chats, Messages } from '../lib/collections';\n\nMeteor.methods({\n  newMessage(message) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-logged-in',\n        'Must be logged in to send message.');\n    }\n\n    check(message, Match.OneOf(\n      {\n        text: String,\n        type: String,\n        chatId: String\n      },\n      {\n        picture: String,\n        type: String,\n        chatId: String\n      }\n    ));\n\n    message.timestamp = new Date();\n    message.userId = this.userId;\n\n    const messageId = Messages.insert(message);\n    Chats.update(message.chatId, { $set: { lastMessage: message } });\n\n    return messageId;\n  },\n  updateName(name) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-logged-in',\n        'Must be logged in to update his name.');\n    }\n\n    check(name, String);\n\n    if (name.length === 0) {\n      throw Meteor.Error('name-required', 'Must provide a user name');\n    }\n\n    return Meteor.users.update(this.userId, { $set: { 'profile.name': name } });\n  },\n  newChat(otherId) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-logged-in',\n        'Must be logged to create a chat.');\n    }\n\n    check(otherId, String);\n    const otherUser = Meteor.users.findOne(otherId);\n\n    if (!otherUser) {\n      throw new Meteor.Error('user-not-exists',\n        'Chat\\'s user not exists');\n    }\n\n    const chat = {\n      userIds: [this.userId, otherId],\n      createdAt: new Date()\n    };\n\n    const chatId = Chats.insert(chat);\n\n    return chatId;\n  },\n  removeChat(chatId) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-logged-in',\n        'Must be logged to create a chat.');\n    }\n\n    check(chatId, String);\n\n    const chat = Chats.findOne(chatId);\n\n    if (!chat || !_.include(chat.userIds, this.userId)) {\n      throw new Meteor.Error('chat-not-exists',\n        'Chat not exists');\n    }\n\n    Messages.remove({ chatId: chatId });\n\n    return Chats.remove({ _id: chatId });\n  },\n  updatePicture(data) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-logged-in',\n        'Must be logged in to update his picture.');\n    }\n\n    check(data, String);\n\n    return Meteor.users.update(this.userId, { $set: { 'profile.picture': data } });\n  }\n});"]},"hash":"ef1143e8ab6bfc89bc28272130c6aaa69a1aff3e"}
