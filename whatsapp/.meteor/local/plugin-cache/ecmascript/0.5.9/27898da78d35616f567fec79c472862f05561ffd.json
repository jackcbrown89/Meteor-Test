{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"angular-ecmascript/module-helpers","imported":["Config","Runner"],"specifiers":[{"kind":"named","imported":"Config","local":"Config"},{"kind":"named","imported":"Runner","local":"Runner"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/scripts/routes.js","filenameRelative":"/client/scripts/routes.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/scripts/routes.js.map","sourceFileName":"/client/scripts/routes.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"routes"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var _;module.import('meteor/underscore',{\"_\":function(v){_=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Config,Runner;module.import('angular-ecmascript/module-helpers',{\"Config\":function(v){Config=v},\"Runner\":function(v){Runner=v}});\n\n\n\n\n\n\nvar RoutesConfig = function (_Config) {\n  _inherits(RoutesConfig, _Config);\n\n  function RoutesConfig() {\n    _classCallCheck(this, RoutesConfig);\n\n    var _this = _possibleConstructorReturn(this, _Config.apply(this, arguments));\n\n    _this.isAuthorized = ['$auth', _this.isAuthorized.bind(_this)];\n    return _this;\n  }\n\n  RoutesConfig.prototype.configure = function () {\n    function configure() {\n      this.$stateProvider.state('tab', {\n        url: '/tab',\n        abstract: true,\n        templateUrl: 'client/templates/tabs.html',\n        resolve: {\n          user: this.isAuthorized,\n          chats: function () {\n            function chats() {\n              return Meteor.subscribe('chats');\n            }\n\n            return chats;\n          }()\n        }\n      }).state('tab.chats', {\n        url: '/chats',\n        views: {\n          'tab-chats': {\n            templateUrl: 'client/templates/chats.html',\n            controller: 'ChatsCtrl as chats'\n          }\n        }\n      }).state('tab.chat', {\n        url: '/chats/:chatId',\n        views: {\n          'tab-chats': {\n            templateUrl: 'client/templates/chat.html',\n            controller: 'ChatCtrl as chat'\n          }\n        }\n      }).state('login', {\n        url: '/login',\n        templateUrl: 'client/templates/login.html',\n        controller: 'LoginCtrl as logger'\n      }).state('confirmation', {\n        url: '/confirmation/:phone',\n        templateUrl: 'client/templates/confirmation.html',\n        controller: 'ConfirmationCtrl as confirmation'\n      }).state('profile', {\n        url: '/profile',\n        templateUrl: 'client/templates/profile.html',\n        controller: 'ProfileCtrl as profile',\n        resolve: {\n          user: this.isAuthorized\n        }\n      }).state('tab.settings', {\n        url: '/settings',\n        views: {\n          'tab-settings': {\n            templateUrl: 'client/templates/settings.html',\n            controller: 'SettingsCtrl as settings'\n          }\n        }\n      });\n\n      this.$urlRouterProvider.otherwise('tab/chats');\n    }\n\n    return configure;\n  }();\n\n  RoutesConfig.prototype.isAuthorized = function () {\n    function isAuthorized($auth) {\n      return $auth.awaitUser();\n    }\n\n    return isAuthorized;\n  }();\n\n  return RoutesConfig;\n}(Config);\n\nRoutesConfig.$inject = ['$stateProvider', '$urlRouterProvider'];\n\nvar RoutesRunner = function (_Runner) {\n  _inherits(RoutesRunner, _Runner);\n\n  function RoutesRunner() {\n    _classCallCheck(this, RoutesRunner);\n\n    return _possibleConstructorReturn(this, _Runner.apply(this, arguments));\n  }\n\n  RoutesRunner.prototype.run = function () {\n    function run() {\n      var _this3 = this;\n\n      this.$rootScope.$on('$stateChangeError', function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var err = _.last(args);\n\n        if (err === 'AUTH_REQUIRED') {\n          _this3.$state.go('login');\n        }\n      });\n    }\n\n    return run;\n  }();\n\n  return RoutesRunner;\n}(Runner);\n\nRoutesRunner.$inject = ['$rootScope', '$state'];\n\nmodule.export(\"default\",exports.default=([RoutesConfig, RoutesRunner]));","ast":null,"map":{"version":3,"sources":["/client/scripts/routes.js"],"names":["_","Meteor","Config","Runner","RoutesConfig","arguments","isAuthorized","bind","configure","$stateProvider","state","url","abstract","templateUrl","resolve","user","chats","subscribe","views","controller","$urlRouterProvider","otherwise","$auth","awaitUser","$inject","RoutesRunner","run","$rootScope","$on","args","err","last","$state","go"],"mappings":";;;AAAA,SAASA,CAAT,QAAkB,mBAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,mCAA/B;;IAEMC,Y;;;AACJ,0BAAc;AAAA;;AAAA,iDACZ,oBAASC,SAAT,CADY;;AAGZ,UAAKC,YAAL,GAAoB,CAAC,OAAD,EAAU,MAAKA,YAAL,CAAkBC,IAAlB,OAAV,CAApB;AAHY;AAIb;;yBAEDC,S;yBAAY;AACV,WAAKC,cAAL,CACGC,KADH,CACS,KADT,EACgB;AACZC,aAAK,MADO;AAEZC,kBAAU,IAFE;AAGZC,qBAAa,4BAHD;AAIZC,iBAAS;AACPC,gBAAM,KAAKT,YADJ;AAEPU,eAFO;AAAA,6BAEC;AACN,qBAAOf,OAAOgB,SAAP,CAAiB,OAAjB,CAAP;AACD;;AAJM;AAAA;AAAA;AAJG,OADhB,EAYGP,KAZH,CAYS,WAZT,EAYsB;AAClBC,aAAK,QADa;AAElBO,eAAO;AACL,uBAAa;AACXL,yBAAa,6BADF;AAEXM,wBAAY;AAFD;AADR;AAFW,OAZtB,EAqBGT,KArBH,CAqBS,UArBT,EAqBqB;AACjBC,aAAK,gBADY;AAEjBO,eAAO;AACL,uBAAa;AACXL,yBAAa,4BADF;AAEXM,wBAAY;AAFD;AADR;AAFU,OArBrB,EA8BGT,KA9BH,CA8BS,OA9BT,EA8BkB;AACdC,aAAK,QADS;AAEdE,qBAAa,6BAFC;AAGdM,oBAAY;AAHE,OA9BlB,EAmCGT,KAnCH,CAmCS,cAnCT,EAmCyB;AACrBC,aAAK,sBADgB;AAErBE,qBAAa,oCAFQ;AAGrBM,oBAAY;AAHS,OAnCzB,EAwCGT,KAxCH,CAwCS,SAxCT,EAwCoB;AAChBC,aAAK,UADW;AAEhBE,qBAAa,+BAFG;AAGhBM,oBAAY,wBAHI;AAIhBL,iBAAS;AACPC,gBAAM,KAAKT;AADJ;AAJO,OAxCpB,EAgDGI,KAhDH,CAgDS,cAhDT,EAgDyB;AACrBC,aAAK,WADgB;AAErBO,eAAO;AACL,0BAAgB;AACdL,yBAAa,gCADC;AAEdM,wBAAY;AAFE;AADX;AAFc,OAhDzB;;AA0DA,WAAKC,kBAAL,CAAwBC,SAAxB,CAAkC,WAAlC;AACD;;;;;yBAEDf,Y;0BAAagB,K,EAAO;AAClB,aAAOA,MAAMC,SAAN,EAAP;AACD;;;;;;EAvEwBrB,M;;AA0E3BE,aAAaoB,OAAb,GAAuB,CAAC,gBAAD,EAAmB,oBAAnB,CAAvB;;IAEMC,Y;;;;;;;;;yBACJC,G;mBAAM;AAAA;;AACJ,WAAKC,UAAL,CAAgBC,GAAhB,CAAoB,mBAApB,EAAyC,YAAa;AAAA,0CAATC,IAAS;AAATA,cAAS;AAAA;;AACpD,YAAMC,MAAM9B,EAAE+B,IAAF,CAAOF,IAAP,CAAZ;;AAEA,YAAIC,QAAQ,eAAZ,EAA6B;AAC3B,iBAAKE,MAAL,CAAYC,EAAZ,CAAe,OAAf;AACD;AACF,OAND;AAOD;;;;;;EATwB9B,M;;AAY3BsB,aAAaD,OAAb,GAAuB,CAAC,YAAD,EAAe,QAAf,CAAvB;;AAEA,eAAe,CAACpB,YAAD,EAAeqB,YAAf,CAAf","file":"/client/scripts/routes.js.map","sourcesContent":["import { _ } from 'meteor/underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { Config, Runner } from 'angular-ecmascript/module-helpers';\n\nclass RoutesConfig extends Config {\n  constructor() {\n    super(...arguments);\n\n    this.isAuthorized = ['$auth', this.isAuthorized.bind(this)];\n  }\n\n  configure() {\n    this.$stateProvider\n      .state('tab', {\n        url: '/tab',\n        abstract: true,\n        templateUrl: 'client/templates/tabs.html',\n        resolve: {\n          user: this.isAuthorized,\n          chats() {\n            return Meteor.subscribe('chats');\n          }\n        }\n      })\n      .state('tab.chats', {\n        url: '/chats',\n        views: {\n          'tab-chats': {\n            templateUrl: 'client/templates/chats.html',\n            controller: 'ChatsCtrl as chats'\n          }\n        }\n      })\n      .state('tab.chat', {\n        url: '/chats/:chatId',\n        views: {\n          'tab-chats': {\n            templateUrl: 'client/templates/chat.html',\n            controller: 'ChatCtrl as chat'\n          }\n        }\n      })\n      .state('login', {\n        url: '/login',\n        templateUrl: 'client/templates/login.html',\n        controller: 'LoginCtrl as logger'\n      })\n      .state('confirmation', {\n        url: '/confirmation/:phone',\n        templateUrl: 'client/templates/confirmation.html',\n        controller: 'ConfirmationCtrl as confirmation'\n      })\n      .state('profile', {\n        url: '/profile',\n        templateUrl: 'client/templates/profile.html',\n        controller: 'ProfileCtrl as profile',\n        resolve: {\n          user: this.isAuthorized\n        }\n      })\n      .state('tab.settings', {\n        url: '/settings',\n        views: {\n          'tab-settings': {\n            templateUrl: 'client/templates/settings.html',\n            controller: 'SettingsCtrl as settings',\n          }\n        }\n      });\n\n    this.$urlRouterProvider.otherwise('tab/chats');\n  }\n\n  isAuthorized($auth) {\n    return $auth.awaitUser();\n  }\n}\n\nRoutesConfig.$inject = ['$stateProvider', '$urlRouterProvider'];\n\nclass RoutesRunner extends Runner {\n  run() {\n    this.$rootScope.$on('$stateChangeError', (...args) => {\n      const err = _.last(args);\n\n      if (err === 'AUTH_REQUIRED') {\n        this.$state.go('login');\n      }\n    });\n  }\n}\n\nRoutesRunner.$inject = ['$rootScope', '$state'];\n\nexport default [RoutesConfig, RoutesRunner];"]},"hash":"27898da78d35616f567fec79c472862f05561ffd"}
